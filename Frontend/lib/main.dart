import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'package:namer_app/ChatScreen/seller_chat_provider.dart'; // Import SellerChatProvider
import 'package:provider/provider.dart'; // Import the Provider package
import 'package:namer_app/ChatScreen/chat_screen.dart';
import 'package:namer_app/Presentation/first_screen/Login.dart';
import 'package:namer_app/Presentation/first_screen/first_screen.dart';
import 'package:namer_app/Presentation/registerpage/registerpage.dart';
import 'package:namer_app/Settings/settings_main_page.dart';
import 'ChatScreen/chat_list_page.dart';
import 'firebase_options.dart'; // This file will be generated by flutterfire configure
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:namer_app/l10n/app_localizations.dart';
import 'Presentation/first_screen/auth/auth_service.dart'; // Import AuthService

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter is ready before Firebase is initialized.

  // Initialize Firebase with platform-specific options
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Firebase options generated by flutterfire configure
  );

  AuthService authService = AuthService();
  await authService.initializeFCM(); // Initialize FCM
  await authService.subscribeToTopic('all'); // Subscribe to the 'all' topic

  runApp(const MyApp()); // Use 'const' here
}

// Create a class to manage the language that the user selected via the app
class LanguageProvider extends ChangeNotifier {
  // Set the default language as English
  Locale _locale = const Locale('en');

  // Add getter for reading locale value in other parts of the app
  Locale get locale => _locale;

  // Add method to update the language the user selected
  void setLocale(Locale locale) {
    _locale = locale;
    notifyListeners();
  }
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key); // Add 'const' here

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => SellerChatProvider()),
        ChangeNotifierProvider(create: (context) => LanguageProvider()),
      ],
      child: Consumer<LanguageProvider>(
        builder: (context, languageProvider, child) {
          return MaterialApp(
            debugShowCheckedModeBanner: false,
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            supportedLocales: const [
              Locale('en'), // English
              Locale('si'), // Sinhala
              Locale('ta'), // Tamil
            ],
            locale: languageProvider.locale,
            home: FirstScreen(),
          );
        },
      ),
    );
  }
}

// Update FirstScreen to include a counter
class FirstScreen extends StatefulWidget {
  @override
  _FirstScreenState createState() => _FirstScreenState();
}

class _FirstScreenState extends State<FirstScreen> {
  int _counter = 0; // Counter variable

  // Method to increment the counter
  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AgriMart'), // Static title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter', // Display the counter value
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter, // Call the increment method
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}