import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'package:namer_app/ChatScreen/seller_chat_provider.dart'; // Import SellerChatProvider
import 'package:provider/provider.dart'; // Import the Provider package
import 'package:namer_app/ChatScreen/chat_screen.dart';
import 'package:namer_app/Presentation/first_screen/Login.dart';
import 'package:namer_app/Presentation/first_screen/first_screen.dart';
import 'package:namer_app/Presentation/registerpage/registerpage.dart';
import 'package:namer_app/Settings/settings_main_page.dart';
import 'ChatScreen/chat_list_page.dart';
import 'firebase_options.dart'; // This file will be generated by flutterfire configure
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:namer_app/l10n/app_localizations.dart';
import 'Presentation/first_screen/auth/auth_service.dart'; // Import AuthService

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter is ready before Firebase is initialized.

  // Initialize Firebase with platform-specific options
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Firebase options generated by flutterfire configure
  );

  AuthService authService = AuthService();
  await authService.initializeFCM(); // Initialize FCM
  await authService.subscribeToTopic('all'); // Subscribe to the 'all' topic

  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  Locale _locale = const Locale('si'); // Default locale

  void setLocale(String languageCode) {
    setState(() {
      _locale = Locale(languageCode);
    });
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    // Wrap the app with MultiProvider to provide the SellerChatProvider
    return MultiProvider(
      providers: [
        // Add the SellerChatProvider or any other providers here
        ChangeNotifierProvider(create: (context) => SellerChatProvider()),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        
        // Add localization delegates
        localizationsDelegates: const [
          AppLocalizations.delegate,
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        
        // Set the current locale
        locale: _locale,
        
        // Define supported locales
        supportedLocales: const [
          Locale('en'), // English
          Locale('si'), // Sinhala
          Locale('ta'), // Tamil
        ],
        
        home: FirstScreen(), // Your home screen
      ),
    );
  }
}
