import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'package:namer_app/ChatScreen/seller_chat_provider.dart'; // Import SellerChatProvider
import 'package:provider/provider.dart'; // Import the Provider package
import 'package:namer_app/Presentation/first_screen/first_screen.dart';
import 'firebase_options.dart'; // This file will be generated by flutterfire configure
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:namer_app/l10n/app_localizations.dart';
import 'Presentation/first_screen/auth/auth_service.dart'; // Import AuthService

void main() async {
  WidgetsFlutterBinding
      .ensureInitialized(); // Ensure Flutter is ready before Firebase is initialized.

  // Initialize Firebase with platform-specific options
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions
        .currentPlatform, // Firebase options generated by flutterfire configure
  );

  AuthService authService = AuthService();
  await authService.initializeFCM(); // Initialize FCM
  await authService.subscribeToTopic('all'); // Subscribe to the 'all' topic

  runApp(MyApp());
}


class LanguageProvider extends ChangeNotifier {

  Locale _locale = const Locale('en');

  Locale get locale => _locale;

  void setLocale(Locale locale) {
    _locale = locale;
    notifyListeners();
  }
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => SellerChatProvider()),
        ChangeNotifierProvider(create: (context) => LanguageProvider()),
      ],
      child: Consumer<LanguageProvider>(
        builder: (context, languageProvider, child) {
          return MaterialApp(
            debugShowCheckedModeBanner: false,
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            supportedLocales: const [
              Locale('en'), // English
              Locale('si'), // Sinhala
              Locale('ta'), // Tamil
            ],
            locale: languageProvider.locale,
            home: FirstScreen(),
          );
        },
      ),
    );
  }
}
