name: Flutter CI/CD with Android Emulator

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch
  workflow_dispatch: # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Frontend # Ensure this matches the actual directory name

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Debugging: Check Repository Structure
      - name: Debug Repository Structure
        run: |
          echo "Checking repository structure..."
          ls -R || echo "Failed to list files!"

      # Step 2: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0' # Specify your Flutter version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 4: Run Unit Tests
      - name: Run Unit Tests
        run: flutter test --coverage

      # Step 5: Run Widget Tests
      - name: Run Widget Tests
        run: flutter test test/widget_test.dart

     

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: Frontend # Ensure this matches the actual directory name

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 4: Decode Keystore
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks

      # Step 5: Create key.properties file
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      # Step 6: Build the Flutter app
      - name: Build Android APK
        run: flutter build apk --release

      # Step 7: Deploy to Firebase App Distribution
      - name: Deploy to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          testers: rukshancoc@gmail.com # Add your email as a tester
          releaseNotes: "Automated build from GitHub Actions"
          file: Frontend/build/app/outputs/flutter-apk/app-release.apk
