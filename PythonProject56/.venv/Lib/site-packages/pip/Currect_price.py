import requests
from bs4 import BeautifulSoup
import os
import re
import PyPDF2
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore
import schedule

cred = credentials.Certificate(r"C:\Users\rukshan\Downloads\connect-model-firebase-adminsdk-fbsvc-d4f42e9183.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# URL of the webpage
url = "https://www.cbsl.gov.lk/en/statistics/economic-indicators/price-report"

# Headers to mimic a real browser request
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
}

# Folder path where PDFs will be saved
folder_path = r"C:\Users\rukshan\Documents\GitHub\AgriMart\PythonProject56\.venv\Lib\site-packages\pip\CBSL"
os.makedirs(folder_path, exist_ok=True)  # Create folder if it doesn't exist

# Get current date in YYYYMMDD format
current_date = datetime.now().strftime('%Y%m%d')

print(current_date)
# Get webpage content
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")

# Find and download all PDF links that match the criteria
for link in soup.find_all("a", href=True):
    if link["href"].endswith(".pdf"):  # Ensure it's a PDF file
        pdf_url = link["href"]

        # Ensure the link is absolute
        if not pdf_url.startswith("http"):
            pdf_url = "https://www.cbsl.gov.lk" + pdf_url

        # Get the file name from the URL
        file_name = pdf_url.split("/")[-1]

        # Check if the file starts with "price_report" and contains today's date
        if file_name.lower().startswith("price_report") and current_date in file_name:
            pdf_path = os.path.join(folder_path, file_name)

            # Download the PDF
            pdf_response = requests.get(pdf_url, headers=headers)
            with open(pdf_path, "wb") as pdf_file:
                pdf_file.write(pdf_response.content)

            print(f"Downloaded: {file_name}")


            def extract_vegetable_wholesale_prices(pdf_path):
                """Extract vegetable wholesale prices from a PDF file and return as (vegetable, price, date)."""
                date_pattern = r'(\d{8})'  # Matches 8 consecutive digits
                match = re.search(date_pattern, pdf_path)
                if match:
                    date_str = match.group(1)
                    try:
                        date_obj = datetime.strptime(date_str, '%Y%m%d')
                        formatted_date = date_obj.strftime('%Y-%m-%d')  # Convert to YYYY-MM-DD
                    except ValueError:
                        print(f"Invalid date format in filename: {pdf_path}")
                        formatted_date = None
                else:
                    print(f"No date found in filename: {pdf_path}")
                    formatted_date = None

                # Extract vegetable prices from PDF
                with open(pdf_path, 'rb') as file:
                    pdf_reader = PyPDF2.PdfReader(file)
                    if len(pdf_reader.pages) < 2:
                        print("Error: The PDF has fewer than 2 pages.")
                        return []

                    page = pdf_reader.pages[1]  # Assuming data is on the second page
                    text = page.extract_text()

                    # Pattern to match vegetable names and their prices
                    pattern = r'([A-Za-z\s]+?)\s+Rs\./kg\s+(\d{2,5}\.?\d*)'
                    matches = re.findall(pattern, text)

                    # List of specific vegetables to filter
                    vegetables_to_filter = [
                        'Carrot', 'Cabbage', 'Tomato', 'Brinjal', 'Pumpkin',
                        'Snake gourd', 'Green Chilli', 'Lime'
                    ]

                    # Filter specific vegetables
                    filtered_pairs = [(veg.strip(), float(price)) for veg, price in matches if
                                      veg.strip() in vegetables_to_filter]
                    print(filtered_pairs)

                    # Add Date column after filtering
                    if formatted_date:
                        return [(veg, price, formatted_date) for veg, price in filtered_pairs]
                    return filtered_pairs


            def main():
                # Extract prices from PDF
                vegetable_prices = extract_vegetable_wholesale_prices(pdf_path)

                if not vegetable_prices:
                    print("No vegetable prices extracted.")
                    return

                # Prepare data for Firestore
                firestore_data = {
                    'predictions_updated_for_current': [
                        {'date': str(date), 'Price': float(price)}
                        for veg, price, date in vegetable_prices
                    ],
                    'timestamp': firestore.SERVER_TIMESTAMP
                }

                # Save predictions to Firestore
                for veg, price, date in vegetable_prices:
                    doc_ref = db.collection('predictions_updated_for_current').document(veg)
                    doc_ref.set({
                        'predictions_updated_for_current': firestore.ArrayUnion([
                            {'date': str(date), 'Price': float(price)}
                        ]),
                        'timestamp': firestore.SERVER_TIMESTAMP
                    }, merge=False)

                    print(f"Saved to Firestore: {veg} - Rs. {price}/kg on {date}")


            main()  # Call the main function to process this PDF

print("Download and extraction process completed.")


