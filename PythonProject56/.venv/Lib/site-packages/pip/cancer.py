import os
import re
import logging
import itertools
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import PyPDF2
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import firebase_admin
from firebase_admin import credentials, firestore
from pmdarima import auto_arima
import re
import PyPDF2
import pandas as pd
from datetime import datetime


# Initialize Firestore
cred = credentials.Certificate(r"PythonProject56\.venv\Lib\site-packages\pip\agri-mart-add65-firebase-adminsdk-fbsvc-a93f240f48.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


# Function to extract vegetable wholesale prices from a PDF file
def extract_vegetable_wholesale_prices(pdf_path):
    """
    Extract vegetable wholesale prices from a PDF file
    """
    date_pattern = r'(\d{8})' 
    match = re.search(date_pattern, pdf_path)

    if match:
        date_str = match.group(1)
        try:
            date_obj = datetime.strptime(date_str, '%Y%m%d')  
            formatted_date = date_obj.strftime('%Y-%m-%d')  
            print(f"Extracted Date: {formatted_date}")
        except ValueError:
            print(f"Invalid date format in filename: {pdf_path}")
            formatted_date = None
    else:
        print(f"No date found in filename: {pdf_path}")
        formatted_date = None

    # Open the PDF file and extract text from the second page
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        page = pdf_reader.pages[1]
        text = page.extract_text()

       
        pattern = r'([A-Za-z\s]+?)\s+Rs\./kg\s+(\d{2,5}\.?\d*)'

        matches = re.findall(pattern, text)

       
        df = pd.DataFrame(matches, columns=['Vegetable', 'today'])
        df['Vegetable'] = df['Vegetable'].str.strip().replace('\n', '', regex=True)

      
        vegetables_to_filter = ['Brinjal', 'Cabbage', 'Carrot', 'Lime', 'Pumpkin', 'Snake gourd', 'Tomato','Green Chilli']
        df = df[df['Vegetable'].isin(vegetables_to_filter)]
        # Add Date column after DataFrame creation
        if formatted_date:
            df['Date'] = formatted_date


        return df

class VegetablePriceAnalyzer:
    def __init__(self, z_score_threshold=3):
        self.z_score_threshold = z_score_threshold
        self.vegetables = ['Brinjal', 'Cabbage', 'Carrot', 'Lime', 'Pumpkin', 'Snake gourd', 'Tomato','Green Chilli']

    def _prepare_data(self, df):
        """
        Prepare data for each vegetable and handle outliers.
        """
        data = {}
        outlier_stats = {}
        removed_outliers = {}

        for veg in self.vegetables:
            try:
                veg_df = df[df['Vegetable'] == veg].copy()

                if len(veg_df) > 0:
        
                    veg_df['today'] = pd.to_numeric(veg_df['today'], errors='coerce')
                    veg_df.dropna(subset=['today'], inplace=True)

                    if len(veg_df) > 0:
                
                        std = veg_df['today'].std()
                        if std == 0:
                            logging.warning(f"Zero standard deviation for {veg}, skipping Z-score calculation")
                            data[veg] = pd.DataFrame({'Price': veg_df['today'], 'Date': veg_df['Date']})
                            continue

                        
                        veg_df['Z-Score'] = (veg_df['today'] - veg_df['today'].mean()) / std

                       
                        outliers = veg_df[abs(veg_df['Z-Score']) > self.z_score_threshold]
                        non_outliers = veg_df[abs(veg_df['Z-Score']) <= self.z_score_threshold]

                        if len(outliers) > 0:
                            logging.info(f"\nRemoving outliers for {veg}:")
                            logging.info(f"Number of outliers removed: {len(outliers)}")
                            logging.info(f"Original data points: {len(veg_df)}")
                            logging.info(f"Remaining data points: {len(non_outliers)}")

                        
                        data[veg] = pd.DataFrame({
                            'Price': non_outliers['today'],
                            'Date': non_outliers['Date'],  # Preserve the Date column
                            'Z-Score': non_outliers['Z-Score']
                        })
                    else:
                        logging.warning(f"No valid data points for {veg} after removing NaN values")
            except Exception as e:
                logging.error(f"Error processing data for {veg}: {e}")
                continue

        return data, outlier_stats, removed_outliers

    def find_optimal_parameters(self, train_data):
        """
        Find optimal SARIMA parameters using a hybrid approach: auto_arima + grid search.
        """
        try:
            
            logging.info("Using auto_arima to find initial parameters...")
            auto_model = auto_arima(
                train_data['Price'],  # Time series data
                seasonal=True,  # Enable seasonal components
                m=7,  # Weekly seasonality (assuming daily data)
                trace=True,  # Print intermediate steps for debugging
                error_action='ignore',  # Ignore errors during fitting
                suppress_warnings=True  # Suppress warnings for non-convergence
            )

            # Extract the optimal parameters from auto_arima
            initial_order = auto_model.order
            initial_seasonal_order = auto_model.seasonal_order

            logging.info(f"Initial parameters found using auto_arima: SARIMA{initial_order}x{initial_seasonal_order}")

            # Step 2: Define a narrowed grid around the auto_arima results
            p_range = range(max(0, initial_order[0] - 1), initial_order[0] + 2)
            d_range = range(max(0, initial_order[1] - 1), initial_order[1] + 2)
            q_range = range(max(0, initial_order[2] - 1), initial_order[2] + 2)

            P_range = range(max(0, initial_seasonal_order[0] - 1), initial_seasonal_order[0] + 2)
            D_range = range(max(0, initial_seasonal_order[1] - 1), initial_seasonal_order[1] + 2)
            Q_range = range(max(0, initial_seasonal_order[2] - 1), initial_seasonal_order[2] + 2)
            m = initial_seasonal_order[3]  # Keep the seasonal period fixed

        
            logging.info("Performing grid search within the narrowed parameter space...")
            best_aic = float("inf")
            best_order = None
            best_seasonal_order = None

            for p, d, q in itertools.product(p_range, d_range, q_range):
                for P, D, Q in itertools.product(P_range, D_range, Q_range):
                    try:
                        model = SARIMAX(
                            train_data['Price'],
                            exog=train_data[['rolling_mean', 'rolling_std']],
                            order=(p, d, q),
                            seasonal_order=(P, D, Q, m),
                            enforce_stationarity=False,
                            enforce_invertibility=False
                        )
                        results = model.fit(disp=False, method_kwargs={'maxiter': 3000})

                       
                        if results.aic < best_aic:
                            best_aic = results.aic
                            best_order = (p, d, q)
                            best_seasonal_order = (P, D, Q, m)

                        logging.info(f"Evaluating SARIMA({p}, {d}, {q})x({P}, {D}, {Q}, {m}): AIC={results.aic}")
                    except Exception as e:
                        logging.warning(f"Error fitting SARIMA({p}, {d}, {q})x({P}, {D}, {Q}, {m}): {e}")
                        continue

            
            logging.info(f"Best parameters found using hybrid approach: SARIMA{best_order}x{best_seasonal_order}")
            return best_order, best_seasonal_order

        except Exception as e:
            logging.error(f"Error finding optimal parameters using hybrid approach: {e}")

           
            logging.warning("Falling back to default parameters: SARIMA(1, 1, 1)x(1, 1, 1, 7)")
            return (1, 1, 1), (1, 1, 1, 7)

    def train_sarima_model(self, data, order, seasonal_order):
        """
        Train SARIMA model with optimized parameters.
        """
        try:
            # Validate input data
            if data[['rolling_mean', 'rolling_std']].isnull().values.any():
                logging.error("Exogenous variables contain missing values.")
                return None

            if len(data) < 14:
                logging.error("Insufficient data points for SARIMA modeling.")
                return None

            # Validate SARIMA parameters
            def validate_sarima_params(order, seasonal_order):
                if not all(isinstance(param, int) and param >= 0 for param in order):
                    raise ValueError(f"Invalid order: {order}. All parameters must be non-negative integers.")
                if not all(isinstance(param, int) and param >= 0 for param in seasonal_order[:3]) or seasonal_order[
                    3] <= 0:
                    raise ValueError(
                        f"Invalid seasonal_order: {seasonal_order}. First three parameters must be non-negative integers, and m > 0.")

            validate_sarima_params(order, seasonal_order)

            # Train the model
            model = SARIMAX(
                data['Price'],
                exog=data[['rolling_mean', 'rolling_std']],
                order=order,
                seasonal_order=seasonal_order,
                enforce_stationarity=False,
                enforce_invertibility=False
            )

            results = model.fit(method_kwargs={'maxiter': 2700})
            return results

        except ValueError as ve:
            logging.error(f"ValueError during model training: {ve}")
        except RuntimeError as re:
            logging.error(f"RuntimeError during model training: {re}")
        except Exception as e:
            logging.error(f"Unexpected error during model training: {e}")

            # Fall back to simpler model
            logging.info("Falling back to simpler model...")
            try:
                fallback_model = SARIMAX(
                    data['Price'],
                    order=(1, 1, 1),
                    seasonal_order=(1, 1, 1, 7),
                    enforce_stationarity=False,
                    enforce_invertibility=False
                )
                results = fallback_model.fit(disp=0)
                return results
            except Exception as fallback_e:
                logging.error(f"Failed to train fallback model: {fallback_e}")
                return None
    def make_predictions(self, model, data, days=28):
        """
        Make predictions for the next 7 days of market prices using the system date.
        """
    
        last_rolling_mean = data['rolling_mean'].iloc[-1]
        last_rolling_std = data['rolling_std'].iloc[-1]

        
        future_exog = pd.DataFrame({
            'rolling_mean': [last_rolling_mean] * days,
            'rolling_std': [last_rolling_std] * days
        })


        forecast = model.forecast(steps=days, exog=future_exog)
        confidence_intervals = model.get_forecast(steps=days, exog=future_exog).conf_int()

      
        start_date = datetime.now().date()  
        prediction_dates = [start_date + timedelta(days=i + 1) for i in range(days)]

       
        predictions_list = list(zip(prediction_dates, forecast.values))

        return predictions_list, confidence_intervals
    def calculate_metrics(self, y_true, y_pred):
        """
        Calculate comprehensive performance metrics.
        """
        mse = mean_squared_error(y_true, y_pred)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)
        mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
        accuracy = 100 - mape

        return {
            'Mean Squared Error': mse,
            'Mean Absolute Error': mae,
            'R-squared': r2,
            'MAPE (%)': mape,
            'Accuracy (%)': accuracy
        }

    def analyze_commodity(self, data, commodity_name):
        """
        Enhanced analysis with optimized parameters and additional metrics.
        """
        logging.info(f"\n Analyzing {commodity_name}")

        
        price_series = data.get(commodity_name)

       
        if price_series is None or len(price_series) < 14:
            logging.warning(f"Insufficient data for analysis: {commodity_name}")
            return

       
        if not isinstance(price_series, pd.DataFrame):
            logging.error(f"Expected DataFrame, but got {type(price_series)} for {commodity_name}")
            return

       
        if 'Date' not in price_series.columns:
            logging.error(f"'Date' column is missing from {commodity_name} data!")
            print("Columns available:", price_series.columns)
            return

       
        price_series['Date'] = pd.to_datetime(price_series['Date'], errors='coerce')

        
        missing_dates = price_series[price_series['Date'].isna()]
        if not missing_dates.empty:
            logging.warning(f"Some 'Date' values could not be converted to datetime in {commodity_name}")
            print("Missing dates:\n", missing_dates)
            return

        
        price_series.sort_values(by='Date', inplace=True)
        price_series.set_index('Date', inplace=True)

       
        if not price_series.index.is_monotonic_increasing:
            price_series = price_series.sort_index()
            logging.info("Data was not monotonic. Sorting by date.")

       
        if price_series.index.duplicated().any():
            price_series = price_series[~price_series.index.duplicated(keep='first')]
            logging.info("Duplicate dates found and removed.")

        
        try:
            price_series = price_series.asfreq('D') 
            price_series.fillna(method='ffill', inplace=True)  
        except Exception as e:
            logging.error(f"Error setting frequency for {commodity_name}: {e}")
            return

        
        price_series['rolling_mean'] = price_series['Price'].rolling(window=7, min_periods=1).mean()
        price_series['rolling_std'] = price_series['Price'].rolling(window=7, min_periods=1).std().fillna(0)

        
        train_size = int(len(price_series) * 0.8)
        train_data = price_series[:train_size]
        test_data = price_series[train_size:]

       
        if train_data.index.max() >= test_data.index.min():
            raise ValueError("Temporal overlap detected: Training data extends into the testing period.")

        
        logging.info(f"Training data range: {train_data.index.min()} to {train_data.index.max()}")
        logging.info(f"Testing data range: {test_data.index.min()} to {test_data.index.max()}")

        
        logging.info("Finding optimal model parameters...")
        order, seasonal_order = self.find_optimal_parameters(train_data)
        logging.info(f"Optimal parameters - SARIMA{order}x{seasonal_order}")

        # Train model
        logging.info("Training model with optimized parameters...")
        model = self.train_sarima_model(train_data, order, seasonal_order)

        # Make predictions on test set
        test_predictions = model.predict(
            start=test_data.index[0],
            end=test_data.index[-1],
            exog=test_data[['rolling_mean', 'rolling_std']]
        )

        # Calculate metrics
        metrics = self.calculate_metrics(test_data['Price'], test_predictions)
        logging.info("\n📊 Performance Metrics:")
        for metric, value in metrics.items():
            logging.info(f"{metric}: {value:.4f}")

        # Make future predictions
        predictions, confidence_intervals = self.make_predictions(model, price_series)

        # Prepare data for Firestore
        firestore_data = {
            'predictions_for_next_days': [
                {'date': str(date), 'Price': float(price)}
                for date, price in predictions
            ],
            'timestamp': firestore.SERVER_TIMESTAMP
        }

        # Save predictions to Firestore
        doc_ref = db.collection('predictions_for_next_days').document(commodity_name)
        doc_ref.set(firestore_data)

        logging.info(f"\n📅 {commodity_name} predictions_for_next_days:")
        for date, price in predictions:
            logging.info(f"{date}: {price:.2f} LKR/kg")

        return predictions, metrics

    def main(self):
       
        vegetable_prices_1 = extract_vegetable_wholesale_prices('price_report_20240202_e.pdf')
        vegetable_prices_2 = extract_vegetable_wholesale_prices('price_report_20240205_e.pdf')
        vegetable_prices_3 = extract_vegetable_wholesale_prices('price_report_20240206.pdf')
        vegetable_prices_4 = extract_vegetable_wholesale_prices('price_report_20240207.pdf')
        vegetable_prices_5 = extract_vegetable_wholesale_prices('price_report_20240208.pdf')
        vegetable_prices_6 = extract_vegetable_wholesale_prices('price_report_20240209_e.pdf')
        vegetable_prices_7 = extract_vegetable_wholesale_prices('price_report_20240212_e.pdf')
        vegetable_prices_8 = extract_vegetable_wholesale_prices('price_report_20240213_e.pdf')
        vegetable_prices_9 = extract_vegetable_wholesale_prices('price_report_20240214_e.pdf')
        vegetable_prices_10 = extract_vegetable_wholesale_prices('price_report_20240215_e.pdf')
        vegetable_prices_11 = extract_vegetable_wholesale_prices('price_report_20240216.pdf')
        vegetable_prices_12 = extract_vegetable_wholesale_prices('price_report_20240219_e.pdf')
        vegetable_prices_13 = extract_vegetable_wholesale_prices('price_report_20240220_e.pdf')
        vegetable_prices_14 = extract_vegetable_wholesale_prices('price_report_20240221.pdf')
        vegetable_prices_15 = extract_vegetable_wholesale_prices('price_report_20240222_e.pdf')
        vegetable_prices_16 = extract_vegetable_wholesale_prices('price_report_20240226_e.pdf')
        vegetable_prices_17 = extract_vegetable_wholesale_prices('price_report_20240227_e.pdf')
        vegetable_prices_18 = extract_vegetable_wholesale_prices('price_report_20240228_e.pdf')
        vegetable_prices_19 = extract_vegetable_wholesale_prices('price_report_20240229_e.pdf')
        vegetable_prices_20 = extract_vegetable_wholesale_prices('price_report_20240301_e.pdf')
        vegetable_prices_21 = extract_vegetable_wholesale_prices('price_report_20240304_e.pdf')
        vegetable_prices_22 = extract_vegetable_wholesale_prices('price_report_20240305.pdf')
        vegetable_prices_23 = extract_vegetable_wholesale_prices('price_report_20240306_e.pdf')
        vegetable_prices_24 = extract_vegetable_wholesale_prices('price_report_20240307_e.pdf')
        vegetable_prices_25 = extract_vegetable_wholesale_prices('price_report_20240311_e.pdf')
        vegetable_prices_26 = extract_vegetable_wholesale_prices('price_report_20240312_e.pdf')
        vegetable_prices_27 = extract_vegetable_wholesale_prices('price_report_20240313.pdf')
        vegetable_prices_28 = extract_vegetable_wholesale_prices('price_report_20240315_e.pdf')
        vegetable_prices_29 = extract_vegetable_wholesale_prices('price_report_20240314_e.pdf')
        vegetable_prices_30 = extract_vegetable_wholesale_prices('price_report_20240318.pdf')
        vegetable_prices_31 = extract_vegetable_wholesale_prices('price_report_20240319_e.pdf')
        vegetable_prices_32 = extract_vegetable_wholesale_prices('price_report_20240320_e.pdf')
        vegetable_prices_33 = extract_vegetable_wholesale_prices('price_report_20240321_e.pdf')
        vegetable_prices_34 = extract_vegetable_wholesale_prices('price_report_20240322_e.pdf')
        vegetable_prices_35 = extract_vegetable_wholesale_prices('price_report_20240325.pdf')
        vegetable_prices_36 = extract_vegetable_wholesale_prices('price_report_20240326_e.pdf')
        vegetable_prices_37 = extract_vegetable_wholesale_prices('price_report_20240327.pdf')
        vegetable_prices_38 = extract_vegetable_wholesale_prices('price_report_20240328_e.pdf')
        vegetable_prices_39 = extract_vegetable_wholesale_prices('price_report_20240401.pdf')
        vegetable_prices_40 = extract_vegetable_wholesale_prices('price_report_20240402_e.pdf')
        vegetable_prices_41 = extract_vegetable_wholesale_prices('price_report_20240403_e.pdf')
        vegetable_prices_42 = extract_vegetable_wholesale_prices('price_report_20240404.pdf')
        vegetable_prices_43 = extract_vegetable_wholesale_prices('price_report_20240405.pdf')
        vegetable_prices_44 = extract_vegetable_wholesale_prices('price_report_20240408_e.pdf')
        vegetable_prices_45 = extract_vegetable_wholesale_prices('price_report_20240409_e.pdf')
        vegetable_prices_46 = extract_vegetable_wholesale_prices('price_report_20240410.pdf')
        vegetable_prices_47 = extract_vegetable_wholesale_prices('price_report_20240417_e.pdf')
        vegetable_prices_48 = extract_vegetable_wholesale_prices('price_report_20240418_e.pdf')
        vegetable_prices_49 = extract_vegetable_wholesale_prices('price_report_20240419_e.pdf')
        vegetable_prices_50 = extract_vegetable_wholesale_prices('price_report_20240422_e.pdf')
        vegetable_prices_51 = extract_vegetable_wholesale_prices('price_report_20240424_e.pdf')
        vegetable_prices_52 = extract_vegetable_wholesale_prices('price_report_20240425_e.pdf')
        vegetable_prices_53 = extract_vegetable_wholesale_prices('price_report_20240426.pdf')
        vegetable_prices_54 = extract_vegetable_wholesale_prices('price_report_20240429_e.pdf')
        vegetable_prices_55 = extract_vegetable_wholesale_prices('price_report_20240430_e.pdf')
        vegetable_prices_56 = extract_vegetable_wholesale_prices('price_report_20240502_e.pdf')
        vegetable_prices_57 = extract_vegetable_wholesale_prices('price_report_20240503_e.pdf')
        vegetable_prices_58 = extract_vegetable_wholesale_prices('price_report_20240506_e.pdf')
        vegetable_prices_59 = extract_vegetable_wholesale_prices('price_report_20240507_e.pdf')
        vegetable_prices_60 = extract_vegetable_wholesale_prices('price_report_20240508_e.pdf')
        vegetable_prices_61 = extract_vegetable_wholesale_prices('price_report_20240509_e.pdf')
        vegetable_prices_62 = extract_vegetable_wholesale_prices('price_report_20240514_e.pdf')
        vegetable_prices_63 = extract_vegetable_wholesale_prices('price_report_20240513.pdf')
        vegetable_prices_64 = extract_vegetable_wholesale_prices('price_report_20240515.pdf')
        vegetable_prices_65 = extract_vegetable_wholesale_prices('price_report_20240516.pdf')
        vegetable_prices_66 = extract_vegetable_wholesale_prices('price_report_20240517_e.pdf')
        vegetable_prices_67 = extract_vegetable_wholesale_prices('price_report_20240520_e.pdf')
        vegetable_prices_68 = extract_vegetable_wholesale_prices('price_report_20240521.pdf')
        vegetable_prices_69 = extract_vegetable_wholesale_prices('price_report_20240522_e.pdf')
        vegetable_prices_70 = extract_vegetable_wholesale_prices('price_report_20240527_e.pdf')
        vegetable_prices_71 = extract_vegetable_wholesale_prices('price_report_20240528_e.pdf')
        vegetable_prices_72 = extract_vegetable_wholesale_prices('price_report_20240529_e.pdf')
        vegetable_prices_73 = extract_vegetable_wholesale_prices('price_report_20240531_e.pdf')
        vegetable_prices_74 = extract_vegetable_wholesale_prices('price_report_20240603_e_0.pdf')
        vegetable_prices_75 = extract_vegetable_wholesale_prices('price_report_20240604_e.pdf')
        vegetable_prices_76 = extract_vegetable_wholesale_prices('price_report_20240605_e.pdf')
        vegetable_prices_77 = extract_vegetable_wholesale_prices('price_report_20240612_e.pdf')
        vegetable_prices_78 = extract_vegetable_wholesale_prices('price_report_20240613_e.pdf')
        vegetable_prices_79 = extract_vegetable_wholesale_prices('price_report_20240614_e.pdf')
        vegetable_prices_80 = extract_vegetable_wholesale_prices('price_report_20240618_e.pdf')
        vegetable_prices_81 = extract_vegetable_wholesale_prices('price_report_20240619_e.pdf')
        vegetable_prices_82 = extract_vegetable_wholesale_prices('price_report_20240620_e.pdf')
        vegetable_prices_83 = extract_vegetable_wholesale_prices('price_report_20240624_e.pdf')
        vegetable_prices_84 = extract_vegetable_wholesale_prices('price_report_20240625_e.pdf')
        vegetable_prices_85 = extract_vegetable_wholesale_prices('price_report_20240626.pdf')
        vegetable_prices_86 = extract_vegetable_wholesale_prices('price_report_20240627_e.pdf')
        vegetable_prices_87 = extract_vegetable_wholesale_prices('price_report_20240628_e.pdf')
        vegetable_prices_88 = extract_vegetable_wholesale_prices('price_report_20240701_e.pdf')
        vegetable_prices_89 = extract_vegetable_wholesale_prices('price_report_20240702_e.pdf')
        vegetable_prices_90 = extract_vegetable_wholesale_prices('price_report_20240703_e.pdf')
        vegetable_prices_91 = extract_vegetable_wholesale_prices('price_report_20240704_e.pdf')
        vegetable_prices_92 = extract_vegetable_wholesale_prices('price_report_20240705_e.pdf')
        vegetable_prices_93 = extract_vegetable_wholesale_prices('price_report_20240708_e.pdf')
        vegetable_prices_94 = extract_vegetable_wholesale_prices('price_report_20240709_e.pdf')
        vegetable_prices_95 = extract_vegetable_wholesale_prices('price_report_20240710_e.pdf')
        vegetable_prices_96 = extract_vegetable_wholesale_prices('price_report_20240711_e.pdf')
        vegetable_prices_97 = extract_vegetable_wholesale_prices('price_report_20240712_e.pdf')
        vegetable_prices_98 = extract_vegetable_wholesale_prices('price_report_20240715_e.pdf')
        vegetable_prices_99 = extract_vegetable_wholesale_prices('price_report_20240716_e.pdf')
        vegetable_prices_100 = extract_vegetable_wholesale_prices('price_report_20240717_e.pdf')
        vegetable_prices_101 = extract_vegetable_wholesale_prices('price_report_20240718_e.pdf')
        vegetable_prices_102 = extract_vegetable_wholesale_prices('price_report_20240719_e.pdf')
        vegetable_prices_103 = extract_vegetable_wholesale_prices('price_report_20240722_e.pdf')
        vegetable_prices_104 = extract_vegetable_wholesale_prices('price_report_20240723.pdf')
        vegetable_prices_105 = extract_vegetable_wholesale_prices('price_report_20240724_e.pdf')
        vegetable_prices_106 = extract_vegetable_wholesale_prices('price_report_20240726.pdf')
        vegetable_prices_107 = extract_vegetable_wholesale_prices('price_report_20240729_e.pdf')
        vegetable_prices_108 = extract_vegetable_wholesale_prices('price_report_20240730_e.pdf')
        vegetable_prices_109 = extract_vegetable_wholesale_prices('price_report_20240731_e.pdf')
        vegetable_prices_110 = extract_vegetable_wholesale_prices('price_report_20240801_e.pdf')
        vegetable_prices_111 = extract_vegetable_wholesale_prices('price_report_20240802_e.pdf')
        vegetable_prices_112 = extract_vegetable_wholesale_prices('price_report_20240805_e.pdf')
        vegetable_prices_113 = extract_vegetable_wholesale_prices('price_report_20240806_e.pdf')
        vegetable_prices_114 = extract_vegetable_wholesale_prices('price_report_20240807.pdf')
        vegetable_prices_115 = extract_vegetable_wholesale_prices('price_report_20240808_e.pdf')
        vegetable_prices_116 = extract_vegetable_wholesale_prices('price_report_20240809_e.pdf')
        vegetable_prices_117 = extract_vegetable_wholesale_prices('price_report_20240812_e.pdf')
        vegetable_prices_118 = extract_vegetable_wholesale_prices('price_report_20240813_e.pdf')
        vegetable_prices_119 = extract_vegetable_wholesale_prices('price_report_20240814_e.pdf')
        vegetable_prices_120 = extract_vegetable_wholesale_prices('price_report_20240815_e.pdf')
        vegetable_prices_121 = extract_vegetable_wholesale_prices('price_report_20240816_e.pdf')
        vegetable_prices_123 = extract_vegetable_wholesale_prices('price_report_20240820_e.pdf')
        vegetable_prices_124 = extract_vegetable_wholesale_prices('price_report_20240821_e.pdf')
        vegetable_prices_125 = extract_vegetable_wholesale_prices('price_report_20240822_e.pdf')
        vegetable_prices_126 = extract_vegetable_wholesale_prices('price_report_20240823_e.pdf')
        vegetable_prices_127 = extract_vegetable_wholesale_prices('price_report_20240826_e.pdf')
        vegetable_prices_128 = extract_vegetable_wholesale_prices('price_report_20240827.pdf')
        vegetable_prices_129 = extract_vegetable_wholesale_prices('price_report_20240828.pdf')
        vegetable_prices_130 = extract_vegetable_wholesale_prices('price_report_20240829_e.pdf')
        vegetable_prices_131 = extract_vegetable_wholesale_prices('price_report_20240830_e.pdf')
        vegetable_prices_132 = extract_vegetable_wholesale_prices('price_report_20240902_e.pdf')
        vegetable_prices_133 = extract_vegetable_wholesale_prices('price_report_20240903_e.pdf')
        vegetable_prices_134 = extract_vegetable_wholesale_prices('price_report_20240904_e.pdf')
        vegetable_prices_135 = extract_vegetable_wholesale_prices('price_report_20240905_e.pdf')
        vegetable_prices_136 = extract_vegetable_wholesale_prices('price_report_20240906_e.pdf')
        vegetable_prices_137 = extract_vegetable_wholesale_prices('price_report_20240909_e.pdf')
        vegetable_prices_138 = extract_vegetable_wholesale_prices('price_report_20240910.pdf')
        vegetable_prices_139 = extract_vegetable_wholesale_prices('price_report_20240911.pdf')
        vegetable_prices_140 = extract_vegetable_wholesale_prices('price_report_20240912.pdf')
        vegetable_prices_141 = extract_vegetable_wholesale_prices('price_report_20240913_e.pdf')
        vegetable_prices_142 = extract_vegetable_wholesale_prices('price_report_20240918_e.pdf')
        vegetable_prices_143 = extract_vegetable_wholesale_prices('price_report_20240919_e.pdf')
        vegetable_prices_144 = extract_vegetable_wholesale_prices('price_report_20240920_e.pdf')
        vegetable_prices_145 = extract_vegetable_wholesale_prices('price_report_20240923_e.pdf')
        vegetable_prices_146 = extract_vegetable_wholesale_prices('price_report_20240924_e.pdf')
        vegetable_prices_147 = extract_vegetable_wholesale_prices('price_report_20240925_e.pdf')
        vegetable_prices_148 = extract_vegetable_wholesale_prices('price_report_20240926_e.pdf')
        vegetable_prices_149 = extract_vegetable_wholesale_prices('price_report_20240927.pdf')
        vegetable_prices_150 = extract_vegetable_wholesale_prices('price_report_20240930_e.pdf')
        vegetable_prices_151 = extract_vegetable_wholesale_prices('price_report_20241001_e.pdf')
        vegetable_prices_152 = extract_vegetable_wholesale_prices('price_report_20241002_e.pdf')
        vegetable_prices_153 = extract_vegetable_wholesale_prices('price_report_20241003_e.pdf')
        vegetable_prices_154 = extract_vegetable_wholesale_prices('price_report_20241004_e.pdf')
        vegetable_prices_155 = extract_vegetable_wholesale_prices('price_report_20241007_e.pdf')
        vegetable_prices_156 = extract_vegetable_wholesale_prices('price_report_20241008_e.pdf')
        vegetable_prices_157 = extract_vegetable_wholesale_prices('price_report_20241009_e.pdf')
        vegetable_prices_158 = extract_vegetable_wholesale_prices('price_report_20241010_e.pdf')
        vegetable_prices_159 = extract_vegetable_wholesale_prices('price_report_20241011.pdf')
        vegetable_prices_160 = extract_vegetable_wholesale_prices('price_report_20241014_e.pdf')
        vegetable_prices_161 = extract_vegetable_wholesale_prices('price_report_20241015_e.pdf')
        vegetable_prices_162 = extract_vegetable_wholesale_prices('price_report_20241016_e.pdf')
        vegetable_prices_163 = extract_vegetable_wholesale_prices('price_report_20241018_e.pdf')
        vegetable_prices_164 = extract_vegetable_wholesale_prices('price_report_20241021_e.pdf')
        vegetable_prices_165 = extract_vegetable_wholesale_prices('price_report_20241022_e.pdf')
        vegetable_prices_166 = extract_vegetable_wholesale_prices('price_report_20241023.pdf')
        vegetable_prices_167 = extract_vegetable_wholesale_prices('price_report_20241024.pdf')
        vegetable_prices_168 = extract_vegetable_wholesale_prices('price_report_20241025_e.pdf')
        vegetable_prices_169 = extract_vegetable_wholesale_prices('price_report_20241028_e.pdf')
        vegetable_prices_170 = extract_vegetable_wholesale_prices('price_report_20241029_e.pdf')
        vegetable_prices_171 = extract_vegetable_wholesale_prices('price_report_20241030_e.pdf')
        vegetable_prices_172 = extract_vegetable_wholesale_prices('price_report_20241101.pdf')
        vegetable_prices_173 = extract_vegetable_wholesale_prices('price_report_20241104_e.pdf')
        vegetable_prices_174 = extract_vegetable_wholesale_prices('price_report_20241105_e.pdf')
        vegetable_prices_175 = extract_vegetable_wholesale_prices('price_report_20241106_e.pdf')
        vegetable_prices_176 = extract_vegetable_wholesale_prices('price_report_20241107_e.pdf')
        vegetable_prices_177 = extract_vegetable_wholesale_prices('price_report_20241108_e.pdf')
        vegetable_prices_178 = extract_vegetable_wholesale_prices('price_report_20241111_e.pdf')
        vegetable_prices_179 = extract_vegetable_wholesale_prices('price_report_20241112_e.pdf')
        vegetable_prices_180 = extract_vegetable_wholesale_prices('price_report_20241113_e.pdf')
        vegetable_prices_181 = extract_vegetable_wholesale_prices('price_report_20241114.pdf')
        vegetable_prices_182 = extract_vegetable_wholesale_prices('price_report_20241118.pdf')
        vegetable_prices_183 = extract_vegetable_wholesale_prices('price_report_20241119_e.pdf')
        vegetable_prices_184 = extract_vegetable_wholesale_prices('price_report_20241120.pdf')
        vegetable_prices_185 = extract_vegetable_wholesale_prices('price_report_20241121_e.pdf')
        vegetable_prices_186 = extract_vegetable_wholesale_prices('price_report_20241122_e.pdf')
        vegetable_prices_187 = extract_vegetable_wholesale_prices('price_report_20241125_e.pdf')
        vegetable_prices_188 = extract_vegetable_wholesale_prices('price_report_20241126.pdf')
        vegetable_prices_189 = extract_vegetable_wholesale_prices('price_report_20241127_e.pdf')
        vegetable_prices_190 = extract_vegetable_wholesale_prices('price_report_20241128.pdf')
        vegetable_prices_191 = extract_vegetable_wholesale_prices('price_report_20241129_e.pdf')
        vegetable_prices_192 = extract_vegetable_wholesale_prices('price_report_20241202.pdf')
        vegetable_prices_193 = extract_vegetable_wholesale_prices('price_report_20241203_e.pdf')
        vegetable_prices_194 = extract_vegetable_wholesale_prices('price_report_20241204_e.pdf')
        vegetable_prices_195 = extract_vegetable_wholesale_prices('price_report_20241205_e.pdf')
        vegetable_prices_196 = extract_vegetable_wholesale_prices('price_report_20241206_e.pdf')
        vegetable_prices_197 = extract_vegetable_wholesale_prices('price_report_20241209_e.pdf')
        vegetable_prices_198 = extract_vegetable_wholesale_prices('price_report_20241210_e.pdf')
        vegetable_prices_199 = extract_vegetable_wholesale_prices('price_report_20241211_e.pdf')
        vegetable_prices_200 = extract_vegetable_wholesale_prices('price_report_20241212_e.pdf')
        vegetable_prices_201 = extract_vegetable_wholesale_prices('price_report_20241213_e.pdf')
        vegetable_prices_202 = extract_vegetable_wholesale_prices('price_report_20241216_e.pdf')
        vegetable_prices_203 = extract_vegetable_wholesale_prices('price_report_20241217_e.pdf')
        vegetable_prices_204 = extract_vegetable_wholesale_prices('price_report_20241218_e.pdf')
        vegetable_prices_205 = extract_vegetable_wholesale_prices('price_report_20241219_e.pdf')
        vegetable_prices_206 = extract_vegetable_wholesale_prices('price_report_20241220_e.pdf')
        vegetable_prices_207 = extract_vegetable_wholesale_prices('price_report_20241223_e.pdf')
        vegetable_prices_208 = extract_vegetable_wholesale_prices('price_report_20241224_e.pdf')
        vegetable_prices_209 = extract_vegetable_wholesale_prices('price_report_20241226.pdf')
        vegetable_prices_210 = extract_vegetable_wholesale_prices('price_report_20241227_e.pdf')
        vegetable_prices_211 = extract_vegetable_wholesale_prices('price_report_20241230_e.pdf')
        vegetable_prices_212 = extract_vegetable_wholesale_prices('price_report_20241231_e.pdf')
        vegetable_prices_213 = extract_vegetable_wholesale_prices('price_report_20250101_e.pdf')
        vegetable_prices_214 = extract_vegetable_wholesale_prices('price_report_20250102_e.pdf')
        vegetable_prices_215 = extract_vegetable_wholesale_prices('price_report_20250103_e.pdf')
        vegetable_prices_216 = extract_vegetable_wholesale_prices('price_report_20250106_e.pdf')
        vegetable_prices_217 = extract_vegetable_wholesale_prices('price_report_20250107_e.pdf')
        vegetable_prices_218 = extract_vegetable_wholesale_prices('price_report_20250108_e.pdf')
        vegetable_prices_219 = extract_vegetable_wholesale_prices('price_report_20250109_e.pdf')
        vegetable_prices_220 = extract_vegetable_wholesale_prices('price_report_20250110_e.pdf')
        vegetable_prices_223 = extract_vegetable_wholesale_prices('price_report_20250115_e.pdf')
        vegetable_prices_224 = extract_vegetable_wholesale_prices('price_report_20250116_e.pdf')
        vegetable_prices_225 = extract_vegetable_wholesale_prices('price_report_20250117_e.pdf')
        vegetable_prices_226 = extract_vegetable_wholesale_prices('price_report_20250120_e.pdf')
        vegetable_prices_227 = extract_vegetable_wholesale_prices('price_report_20250121_e.pdf')
        vegetable_prices_228 = extract_vegetable_wholesale_prices('price_report_20250122_e.pdf')
        vegetable_prices_229 = extract_vegetable_wholesale_prices('price_report_20250123_e.pdf')
        vegetable_prices_230 = extract_vegetable_wholesale_prices('price_report_20250124_e.pdf')
        vegetable_prices_231 = extract_vegetable_wholesale_prices('price_report_20250127_e.pdf')
        vegetable_prices_232 = extract_vegetable_wholesale_prices('price_report_20250128_e.pdf')
        vegetable_prices_233 = extract_vegetable_wholesale_prices('price_report_20250129_e_0.pdf')
        vegetable_prices_234 = extract_vegetable_wholesale_prices('price_report_20250130_e (1).pdf')
        vegetable_prices_235 = extract_vegetable_wholesale_prices('price_report_20250131_e (1).pdf')
        vegetable_prices_237 = extract_vegetable_wholesale_prices('price_report_20250203_e.pdf')
        vegetable_prices_238 = extract_vegetable_wholesale_prices('price_report_20250205_e.pdf')
        vegetable_prices_239 = extract_vegetable_wholesale_prices('price_report_20250206_e.pdf')
        vegetable_prices_240 = extract_vegetable_wholesale_prices('price_report_20250207_e.pdf')
        vegetable_prices_241 = extract_vegetable_wholesale_prices('price_report_20250210_e.pdf')
        vegetable_prices_242 = extract_vegetable_wholesale_prices('price_report_20250211_e.pdf')
        vegetable_prices_243 = extract_vegetable_wholesale_prices('price_report_20250213_e.pdf')
        vegetable_prices_244 = extract_vegetable_wholesale_prices('price_report_20250214_e.pdf')
        vegetable_prices_245 = extract_vegetable_wholesale_prices('price_report_20250217_e.pdf')
        vegetable_prices_246 = extract_vegetable_wholesale_prices('price_report_20250218_e.pdf')
        vegetable_prices_247 = extract_vegetable_wholesale_prices('price_report_20250219_e.pdf')
        vegetable_prices_248 = extract_vegetable_wholesale_prices('price_report_20250220_e.pdf')
        vegetable_prices_249 = extract_vegetable_wholesale_prices('price_report_20250221_e.pdf')
        vegetable_prices_250 = extract_vegetable_wholesale_prices('price_report_20250224_e.pdf')
        vegetable_prices_251 = extract_vegetable_wholesale_prices('price_report_20250225_e.pdf')
        vegetable_prices_252 = extract_vegetable_wholesale_prices('price_report_20250227_e.pdf')
        vegetable_prices_253 = extract_vegetable_wholesale_prices('price_report_20250228_e.pdf')
        vegetable_prices_254 = extract_vegetable_wholesale_prices('price_report_20250303_e.pdf')
        vegetable_prices_255 = extract_vegetable_wholesale_prices('price_report_20250304_e.pdf')
        vegetable_prices_256 = extract_vegetable_wholesale_prices('price_report_20250305_e.pdf')
        vegetable_prices_257 = extract_vegetable_wholesale_prices('price_report_20250306_e.pdf')
        vegetable_prices_258 = extract_vegetable_wholesale_prices('price_report_20250307_e.pdf')
        vegetable_prices_259 = extract_vegetable_wholesale_prices('price_report_20250310_e.pdf')
        vegetable_prices_260 = extract_vegetable_wholesale_prices('price_report_20250312_e.pdf')
        vegetable_prices_261 = extract_vegetable_wholesale_prices('price_report_20250314_e.pdf')


        combined_df = pd.concat([
            vegetable_prices_1, vegetable_prices_2, vegetable_prices_3, vegetable_prices_4,
            vegetable_prices_5, vegetable_prices_6, vegetable_prices_7, vegetable_prices_8,
            vegetable_prices_9, vegetable_prices_10, vegetable_prices_11, vegetable_prices_12,
            vegetable_prices_13, vegetable_prices_14, vegetable_prices_15, vegetable_prices_16,
            vegetable_prices_17, vegetable_prices_18, vegetable_prices_19, vegetable_prices_20,
            vegetable_prices_21, vegetable_prices_22, vegetable_prices_23, vegetable_prices_24,
            vegetable_prices_25, vegetable_prices_26, vegetable_prices_27, vegetable_prices_28,
            vegetable_prices_29, vegetable_prices_30, vegetable_prices_31, vegetable_prices_32,
            vegetable_prices_33, vegetable_prices_34, vegetable_prices_35, vegetable_prices_36,
            vegetable_prices_37, vegetable_prices_38, vegetable_prices_39,
            vegetable_prices_40, vegetable_prices_41, vegetable_prices_42, vegetable_prices_43,
            vegetable_prices_44, vegetable_prices_45, vegetable_prices_46, vegetable_prices_47,
            vegetable_prices_48, vegetable_prices_49, vegetable_prices_50, vegetable_prices_51,
            vegetable_prices_52, vegetable_prices_53, vegetable_prices_54, vegetable_prices_55,
            vegetable_prices_56, vegetable_prices_57, vegetable_prices_58, vegetable_prices_59,
            vegetable_prices_60, vegetable_prices_61, vegetable_prices_62, vegetable_prices_63,
            vegetable_prices_64, vegetable_prices_65, vegetable_prices_66, vegetable_prices_67,
            vegetable_prices_68, vegetable_prices_69, vegetable_prices_70, vegetable_prices_71,
            vegetable_prices_72, vegetable_prices_73, vegetable_prices_74, vegetable_prices_75,
            vegetable_prices_76, vegetable_prices_77, vegetable_prices_78, vegetable_prices_79,
            vegetable_prices_80, vegetable_prices_81, vegetable_prices_82, vegetable_prices_83,
            vegetable_prices_84, vegetable_prices_85, vegetable_prices_86, vegetable_prices_87,
            vegetable_prices_88, vegetable_prices_89, vegetable_prices_90, vegetable_prices_91,
            vegetable_prices_92, vegetable_prices_93, vegetable_prices_94, vegetable_prices_95, vegetable_prices_96, vegetable_prices_97,
            vegetable_prices_98, vegetable_prices_99,
            vegetable_prices_100, vegetable_prices_101, vegetable_prices_102,  vegetable_prices_103, vegetable_prices_104, vegetable_prices_105,
            vegetable_prices_106,
            vegetable_prices_107,
            vegetable_prices_108, vegetable_prices_109, vegetable_prices_110, vegetable_prices_111, vegetable_prices_112, vegetable_prices_113,
            vegetable_prices_114,
            vegetable_prices_115,
            vegetable_prices_116, vegetable_prices_117, vegetable_prices_118, vegetable_prices_119,
            vegetable_prices_120, vegetable_prices_121,  vegetable_prices_123, vegetable_prices_124, vegetable_prices_125, vegetable_prices_126,
            vegetable_prices_127,
            vegetable_prices_128, vegetable_prices_129, vegetable_prices_130, vegetable_prices_131, vegetable_prices_132, vegetable_prices_133,
            vegetable_prices_134,
            vegetable_prices_135, vegetable_prices_136, vegetable_prices_137, vegetable_prices_138, vegetable_prices_139, vegetable_prices_140,
            vegetable_prices_141,
            vegetable_prices_142, vegetable_prices_143, vegetable_prices_144, vegetable_prices_145, vegetable_prices_146, vegetable_prices_147, vegetable_prices_148,
            vegetable_prices_149,
            vegetable_prices_150, vegetable_prices_151, vegetable_prices_152, vegetable_prices_153, vegetable_prices_154, vegetable_prices_155,
            vegetable_prices_156,
            vegetable_prices_157, vegetable_prices_158, vegetable_prices_159, vegetable_prices_160, vegetable_prices_161, vegetable_prices_162,
            vegetable_prices_163,
            vegetable_prices_164,
            vegetable_prices_165, vegetable_prices_166, vegetable_prices_167,
            vegetable_prices_168, vegetable_prices_169, vegetable_prices_170,
            vegetable_prices_171, vegetable_prices_172, vegetable_prices_173,
            vegetable_prices_174, vegetable_prices_175, vegetable_prices_176,
            vegetable_prices_177, vegetable_prices_178, vegetable_prices_179,
            vegetable_prices_180, vegetable_prices_181, vegetable_prices_182, vegetable_prices_183, vegetable_prices_184, vegetable_prices_185,
            vegetable_prices_186,
            vegetable_prices_187,
            vegetable_prices_188,
            vegetable_prices_189,
            vegetable_prices_190,
            vegetable_prices_191,
            vegetable_prices_192,
            vegetable_prices_193,
            vegetable_prices_194,
            vegetable_prices_195,
            vegetable_prices_196,
            vegetable_prices_197,
            vegetable_prices_198,
            vegetable_prices_199,
            vegetable_prices_200,
            vegetable_prices_201,
            vegetable_prices_202,
            vegetable_prices_203,
            vegetable_prices_204,

            vegetable_prices_205,
            vegetable_prices_206,
            vegetable_prices_207,
            vegetable_prices_208,
            vegetable_prices_209,
            vegetable_prices_210,
            vegetable_prices_211,
            vegetable_prices_212,
            vegetable_prices_213,
            vegetable_prices_214,
            vegetable_prices_215,
            vegetable_prices_216,
            vegetable_prices_217,
            vegetable_prices_218,
            vegetable_prices_219,
            vegetable_prices_220,
            vegetable_prices_223,
            vegetable_prices_224,
            vegetable_prices_225,
            vegetable_prices_226,
            vegetable_prices_227,
            vegetable_prices_228,
            vegetable_prices_229,
            vegetable_prices_230,
            vegetable_prices_231,
            vegetable_prices_232,
            vegetable_prices_233,
            vegetable_prices_234,
            vegetable_prices_235,
            vegetable_prices_237,
            vegetable_prices_238,
            vegetable_prices_239,
            vegetable_prices_240,
            vegetable_prices_241,
            vegetable_prices_242,
            vegetable_prices_243,
            vegetable_prices_244,
            vegetable_prices_245,
            vegetable_prices_246,
            vegetable_prices_247,
            vegetable_prices_248,
            vegetable_prices_249,
            vegetable_prices_250,
            vegetable_prices_251,
            vegetable_prices_252,
            vegetable_prices_253,
            vegetable_prices_254,
            vegetable_prices_255,
            vegetable_prices_256,
            vegetable_prices_257,
            vegetable_prices_258,
            vegetable_prices_259,
            vegetable_prices_260,
            vegetable_prices_261,


        ], ignore_index=True)

        # Prepare data and handle outliers
        prepared_data, outlier_stats, removed_outliers = self._prepare_data(combined_df)

        # Analyze each commodity
        for commodity_name in self.vegetables:
            self.analyze_commodity(prepared_data, commodity_name)


if __name__ == "__main__":
    analyzer = VegetablePriceAnalyzer(z_score_threshold=3)
    analyzer.main()